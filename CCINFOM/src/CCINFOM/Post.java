/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CCINFOM;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author angelo
 */
public class Post extends javax.swing.JFrame {

    /**
     * Creates new form Post
     */
    public Post() {
        initComponents();
        updateDB();
    }

    private ArrayList<Integer> returnCalendar(){
        ArrayList<Integer> dateList = new ArrayList<Integer>();
        
        Date dateSelected = postDate.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(dateSelected);
        
        dateList.add(calendar.get(Calendar.DAY_OF_MONTH));
        dateList.add(calendar.get(Calendar.MONTH) + 1);
        dateList.add(calendar.get(Calendar.YEAR));
        
        return dateList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void updateDB(){
        int colCount;
        
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection sqlConn = DatabaseConnection.getConnection();
            PreparedStatement pst = sqlConn.prepareStatement("SELECT * FROM posts");
            
            ResultSet rs = pst.executeQuery();
            ResultSetMetaData st = rs.getMetaData();
            
            colCount = st.getColumnCount();
            DefaultTableModel recordTable = (DefaultTableModel)postTable.getModel();
            recordTable.setRowCount(0);
            
            while(rs.next()){
                Vector columnData = new Vector();
                for(int j = 1; j <= colCount; j++){
                    columnData.add(rs.getObject(j));
                }
                recordTable.addRow(columnData);
            }
            
            
        }catch(ClassNotFoundException | SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        tfCountry = new javax.swing.JTextField();
        tfVersion = new javax.swing.JTextField();
        calendarDate = new com.toedter.calendar.JCalendar();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        accountId = new javax.swing.JTextField();
        postDate = new com.toedter.calendar.JCalendar();
        vis = new javax.swing.JComboBox<>();
        Exit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        postTable = new javax.swing.JTable();

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(95, 158, 160), 4));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel2.setText("Release date");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, -1, 36));

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel3.setText("Platform name");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, 36));

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel4.setText("Platform version");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, 36));

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel5.setText("Country of origin");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, 36));
        jPanel3.add(tfName, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, 350, 37));
        jPanel3.add(tfCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, 350, 37));
        jPanel3.add(tfVersion, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 350, 37));
        jPanel3.add(calendarDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, 400, 190));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(95, 158, 160), 8));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 64)); // NOI18N
        jLabel1.setText("Post");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, -1, 50));

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(95, 158, 160), 4));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel6.setText("Post Date");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 30, -1, 36));

        jLabel7.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel7.setText("Account ID");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, 36));

        jLabel8.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel8.setText("Visibility");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, -1, 36));
        jPanel4.add(accountId, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 350, 37));
        jPanel4.add(postDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 400, 190));

        vis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Public", "Private", "Friends Only", "Restricted" }));
        jPanel4.add(vis, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 350, 40));

        Exit.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 22)); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jPanel4.add(Exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 280, 150, 50));

        jButton1.setText("jButton1");
        jPanel4.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 220, -1, -1));

        Delete.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 22)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        jPanel4.add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 280, 150, 50));

        Update.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 22)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        jPanel4.add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, 150, 50));

        Add.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 22)); // NOI18N
        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        jPanel4.add(Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 280, 150, 50));

        postTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "post_id", "account_id", "post_date", "visibility"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        postTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                postTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(postTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        HomePage hp = new HomePage();
        this.dispose();
        hp.setVisible(true);
    }//GEN-LAST:event_ExitActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        ArrayList <Integer> idList = new ArrayList<>();
        ArrayList<Integer> dateList = returnCalendar(); // day, month, year


        try {
            // Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            Connection sqlConn = DatabaseConnection.getConnection();

            PreparedStatement accountChecking = sqlConn.prepareStatement("SELECT account_id FROM accounts");
            ResultSet rs = accountChecking.executeQuery();
            
            PreparedStatement pst = sqlConn.prepareStatement("INSERT INTO posts(account_id, post_date, visibility)" +  "VALUE(?, ?, ?)");

            
            while (rs.next()){
                // Get account_id from the current row
                idList.add(rs.getInt("account_id"));
            }
            
            String account_id_text = (String) accountId.getText();
            String visibility = (String) vis.getSelectedItem();
            String date = dateList.get(2) + "-" + dateList.get(1) + "-" + dateList.get(0);

            
            // Check if fields are empty
            if (account_id_text.isEmpty() || visibility.isEmpty() || date.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Complete the information needed.", "Warning", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Parse the account_id from text field
            try {
                int account_id = Integer.parseInt(account_id_text);

                // Ensure account_id exists in the accounts table
                if (!idList.contains(account_id)) {
                    JOptionPane.showMessageDialog(this, "Ensure account_id exists.", "Warning", JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                
                pst.setInt(1, account_id);
                pst.setString(2, date);
                pst.setString(3, visibility);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Record Added!", "Post", JOptionPane.OK_OPTION);
                updateDB();
        
            } catch (NumberFormatException e) {
                // Handle the case where account_id_text is not a valid number
                JOptionPane.showMessageDialog(this, "Invalid account_id. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (HeadlessException | ClassNotFoundException | SQLException ex) {
            // Handle exceptions if any
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }


    }//GEN-LAST:event_AddActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        ArrayList<Integer> idList = new ArrayList<>();
        ArrayList<Integer> dateList = returnCalendar(); // day, month, year

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection sqlConn = DatabaseConnection.getConnection();

            // Fetch all account IDs for validation
            PreparedStatement accountChecking = sqlConn.prepareStatement("SELECT account_id FROM accounts");
            ResultSet rs = accountChecking.executeQuery();
            while (rs.next()) {
                idList.add(rs.getInt("account_id"));
            }

            PreparedStatement pst = sqlConn.prepareStatement(
                "UPDATE posts SET account_id = ?, post_date = ?, visibility = ? WHERE post_id = ?"
            );

            // Get values from user input fields
            String account_id_text = accountId.getText();
            String visibility = (String) vis.getSelectedItem();
            String date = dateList.get(2) + "-" + dateList.get(1) + "-" + dateList.get(0);

            if (account_id_text.isEmpty() || visibility.isEmpty() || date.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Complete the information needed.", "Warning", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                // Parse account_id and ensure it exists
                int account_id = Integer.parseInt(account_id_text);
                if (!idList.contains(account_id)) {
                    JOptionPane.showMessageDialog(this, "Ensure account_id exists.", "Warning", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Parse the selected post_id (from the clicked row in the table)
                DefaultTableModel recordTable = (DefaultTableModel) postTable.getModel();
                int selectedRow = postTable.getSelectedRow();
                int postId = Integer.parseInt(
                    recordTable.getValueAt(selectedRow, recordTable.findColumn("post_id")).toString()
                );

                pst.setInt(1, account_id); 
                pst.setString(2, date); 
                pst.setString(3, visibility); 
                pst.setInt(4, postId); 

                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Record Updated!", "Post", JOptionPane.OK_OPTION);

                updateDB();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid account_id. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (HeadlessException | ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void postTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_postTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel recordTable = (DefaultTableModel) postTable.getModel();
        int selectedRow = postTable.getSelectedRow();

        try {
            String dateString = recordTable.getValueAt(selectedRow, recordTable.findColumn("post_date")).toString();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date date = dateFormat.parse(dateString);
            String visibility = recordTable.getValueAt(selectedRow, recordTable.findColumn("visibility")).toString();
            String accountIdValue = recordTable.getValueAt(selectedRow, recordTable.findColumn("account_id")).toString();
            
            vis.setSelectedItem(visibility); 
            postDate.setDate(date);  
            accountId.setText(accountIdValue);  

        } catch (ParseException ex) {
            // Handle error if date parsing fails
            JOptionPane.showMessageDialog(this, "Error parsing the date: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_postTableMouseClicked

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        DefaultTableModel recordTable = (DefaultTableModel)postTable.getModel();
        int selectedRow = postTable.getSelectedRow();
        
        try{
            Class.forName("com.mysql.jdbc.Driver");
            Connection sqlConn = DatabaseConnection.getConnection();
            if(JOptionPane.showConfirmDialog(this, "Confirm if you want to delete record.", "Message", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION){
                PreparedStatement pst = sqlConn.prepareStatement("DELETE FROM posts WHERE post_id=?");

                pst.setInt(1, Integer.parseInt(recordTable.getValueAt(selectedRow, recordTable.findColumn("post_id")).toString()));
                pst.executeUpdate();
                JOptionPane.showMessageDialog(this, "Record Deleted!", "Message", JOptionPane.OK_OPTION);
                updateDB();
            }
        }catch(HeadlessException | ClassNotFoundException | NumberFormatException | SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }


    }//GEN-LAST:event_DeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Post.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Post.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Post.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Post.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Post().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Exit;
    private javax.swing.JButton Update;
    private javax.swing.JTextField accountId;
    private com.toedter.calendar.JCalendar calendarDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JCalendar postDate;
    private javax.swing.JTable postTable;
    private javax.swing.JTextField tfCountry;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfVersion;
    private javax.swing.JComboBox<String> vis;
    // End of variables declaration//GEN-END:variables
}
